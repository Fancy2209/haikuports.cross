From 3331a53a2b10dcb69ecef0e5cb29e2c6c19e0baf Mon Sep 17 00:00:00 2001
From: Oliver Tappe <zooey@hirschkaefer.de>
Date: Mon, 22 Jul 2013 13:44:57 +0200
Subject: Fix build problems with gcc2


diff --git a/source/common/normalizer2.cpp b/source/common/normalizer2.cpp
index 8c5fdb6..ead1ffd 100644
--- a/source/common/normalizer2.cpp
+++ b/source/common/normalizer2.cpp
@@ -239,7 +239,7 @@ private:
               ReorderingBuffer &buffer, UErrorCode &errorCode) const {
         impl.decompose(src, limit, &buffer, errorCode);
     }
-    using Normalizer2WithImpl::normalize;  // Avoid warning about hiding base class function.
+//    using Normalizer2WithImpl::normalize;  // Avoid warning about hiding base class function.
     virtual void
     normalizeAndAppend(const UChar *src, const UChar *limit, UBool doNormalize,
                        UnicodeString &safeMiddle,
@@ -250,7 +250,7 @@ private:
     spanQuickCheckYes(const UChar *src, const UChar *limit, UErrorCode &errorCode) const {
         return impl.decompose(src, limit, NULL, errorCode);
     }
-    using Normalizer2WithImpl::spanQuickCheckYes;  // Avoid warning about hiding base class function.
+//    using Normalizer2WithImpl::spanQuickCheckYes;  // Avoid warning about hiding base class function.
     virtual UNormalizationCheckResult getQuickCheck(UChar32 c) const {
         return impl.isDecompYes(impl.getNorm16(c)) ? UNORM_YES : UNORM_NO;
     }
@@ -270,7 +270,7 @@ private:
               ReorderingBuffer &buffer, UErrorCode &errorCode) const {
         impl.compose(src, limit, onlyContiguous, TRUE, buffer, errorCode);
     }
-    using Normalizer2WithImpl::normalize;  // Avoid warning about hiding base class function.
+//    using Normalizer2WithImpl::normalize;  // Avoid warning about hiding base class function.
     virtual void
     normalizeAndAppend(const UChar *src, const UChar *limit, UBool doNormalize,
                        UnicodeString &safeMiddle,
@@ -313,7 +313,7 @@ private:
     spanQuickCheckYes(const UChar *src, const UChar *limit, UErrorCode &) const {
         return impl.composeQuickCheck(src, limit, onlyContiguous, NULL);
     }
-    using Normalizer2WithImpl::spanQuickCheckYes;  // Avoid warning about hiding base class function.
+//    using Normalizer2WithImpl::spanQuickCheckYes;  // Avoid warning about hiding base class function.
     virtual UNormalizationCheckResult getQuickCheck(UChar32 c) const {
         return impl.getCompQuickCheck(impl.getNorm16(c));
     }
@@ -340,7 +340,7 @@ private:
               ReorderingBuffer &buffer, UErrorCode &errorCode) const {
         impl.makeFCD(src, limit, &buffer, errorCode);
     }
-    using Normalizer2WithImpl::normalize;  // Avoid warning about hiding base class function.
+//    using Normalizer2WithImpl::normalize;  // Avoid warning about hiding base class function.
     virtual void
     normalizeAndAppend(const UChar *src, const UChar *limit, UBool doNormalize,
                        UnicodeString &safeMiddle,
@@ -351,7 +351,7 @@ private:
     spanQuickCheckYes(const UChar *src, const UChar *limit, UErrorCode &errorCode) const {
         return impl.makeFCD(src, limit, NULL, errorCode);
     }
-    using Normalizer2WithImpl::spanQuickCheckYes;  // Avoid warning about hiding base class function.
+//    using Normalizer2WithImpl::spanQuickCheckYes;  // Avoid warning about hiding base class function.
     virtual UBool hasBoundaryBefore(UChar32 c) const { return impl.hasFCDBoundaryBefore(c); }
     virtual UBool hasBoundaryAfter(UChar32 c) const { return impl.hasFCDBoundaryAfter(c); }
     virtual UBool isInert(UChar32 c) const { return impl.isFCDInert(c); }
diff --git a/source/common/unicode/bytestrie.h b/source/common/unicode/bytestrie.h
index cd40721..217d433 100644
--- a/source/common/unicode/bytestrie.h
+++ b/source/common/unicode/bytestrie.h
@@ -338,6 +338,9 @@ public:
         // but the code looks more confusing that way.)
         UVector32 *stack_;
     };
+#if (__GNUC__ == 2)
+    friend class Iterator;
+#endif
 
 private:
     friend class BytesTrieBuilder;
diff --git a/source/common/unicode/bytestriebuilder.h b/source/common/unicode/bytestriebuilder.h
index 8d7700d..103ac38 100644
--- a/source/common/unicode/bytestriebuilder.h
+++ b/source/common/unicode/bytestriebuilder.h
@@ -141,6 +141,9 @@ private:
     private:
         const char *s;
     };
+#if (__GNUC__ == 2)
+    friend class BTLinearMatchNode;
+#endif
 
     virtual Node *createLinearMatchNode(int32_t i, int32_t byteIndex, int32_t length,
                                         Node *nextNode) const;
diff --git a/source/common/unicode/platform.h.in b/source/common/unicode/platform.h.in
index b0f83b9..71fc8ee 100644
--- a/source/common/unicode/platform.h.in
+++ b/source/common/unicode/platform.h.in
@@ -299,7 +299,7 @@
 
 #ifdef U_STATIC_IMPLEMENTATION
 #define U_EXPORT
-#elif @U_USE_GCC_VISIBILITY_ATTRIBUTE@
+#elif (@U_USE_GCC_VISIBILITY_ATTRIBUTE@) && (__GNUC__ > 2)
 #define U_EXPORT __attribute__((visibility("default")))
 #elif (defined(__SUNPRO_CC) && __SUNPRO_CC >= 0x550) \
    || (defined(__SUNPRO_C) && __SUNPRO_C >= 0x550) 
diff --git a/source/common/unicode/stringtriebuilder.h b/source/common/unicode/stringtriebuilder.h
index 3e85065..7c4678b 100644
--- a/source/common/unicode/stringtriebuilder.h
+++ b/source/common/unicode/stringtriebuilder.h
@@ -245,6 +245,9 @@ protected:
     protected:
         int32_t value;
     };
+#if (__GNUC__ == 2)
+    friend class FinalValueNode;
+#endif
 
     /** @internal */
     class ValueNode : public Node {
@@ -272,6 +275,9 @@ protected:
     protected:
         Node *next;
     };
+#if (__GNUC__ == 2)
+    friend class IntermediateValueNode;
+#endif
 
     /** @internal */
     class LinearMatchNode : public ValueNode {
@@ -323,6 +329,9 @@ protected:
         int32_t values[kMaxBranchLinearSubNodeLength];
         UChar units[kMaxBranchLinearSubNodeLength];
     };
+#if (__GNUC__ == 2)
+    friend class ListBranchNode;
+#endif
 
     /** @internal */
     class SplitBranchNode : public BranchNode {
@@ -339,6 +348,9 @@ protected:
         Node *lessThan;
         Node *greaterOrEqual;
     };
+#if (__GNUC__ == 2)
+    friend class SplitBranchNode;
+#endif
 
     // Branch head node, for writing the actual node lead unit.
     /** @internal */
@@ -354,6 +366,9 @@ protected:
         int32_t length;
         Node *next;  // A branch sub-node.
     };
+#if (__GNUC__ == 2)
+    friend class BranchHeadNode;
+#endif
 
     /** @internal */
     virtual Node *createLinearMatchNode(int32_t i, int32_t unitIndex, int32_t length,
diff --git a/source/common/unicode/ucharstrie.h b/source/common/unicode/ucharstrie.h
index 88d70f4..bbf12dd 100644
--- a/source/common/unicode/ucharstrie.h
+++ b/source/common/unicode/ucharstrie.h
@@ -368,6 +368,9 @@ public:
         // but the code looks more confusing that way.)
         UVector32 *stack_;
     };
+#if (__GNUC__ == 2)
+    friend class Iterator;
+#endif
 
 private:
     friend class UCharsTrieBuilder;
diff --git a/source/common/unicode/ucharstriebuilder.h b/source/common/unicode/ucharstriebuilder.h
index f045820..4811457 100644
--- a/source/common/unicode/ucharstriebuilder.h
+++ b/source/common/unicode/ucharstriebuilder.h
@@ -145,6 +145,9 @@ private:
     private:
         const UChar *s;
     };
+#if (__GNUC__ == 2)
+	friend class UCTLinearMatchNode;
+#endif
 
     virtual Node *createLinearMatchNode(int32_t i, int32_t unitIndex, int32_t length,
                                         Node *nextNode) const;
diff --git a/source/i18n/currfmt.h b/source/i18n/currfmt.h
index 82aae3e..a4ed27b 100644
--- a/source/i18n/currfmt.h
+++ b/source/i18n/currfmt.h
@@ -63,7 +63,9 @@ class CurrencyFormat : public MeasureFormat {
     virtual Format* clone() const;
 
 
+#if (__GNUC__ > 2)
     using MeasureFormat::format;
+#endif
 
     /**
      * Override Format API.
diff --git a/source/i18n/digitlst.cpp b/source/i18n/digitlst.cpp
index 1ae9027..42338a6 100644
--- a/source/i18n/digitlst.cpp
+++ b/source/i18n/digitlst.cpp
@@ -37,7 +37,9 @@
 #include <limits.h>
 #include <string.h>
 #include <stdio.h>
+#if (__GNUC__ > 2)
 #include <limits>
+#endif
 
 // ***************************************************************************
 // class DigitList
@@ -423,11 +425,15 @@ DigitList::getDouble() const
             nonConstThis->fDouble /= -1;
         }
     } else if (isInfinite()) {
+#if (__GNUC__ > 2)
         if (std::numeric_limits<double>::has_infinity) {
             nonConstThis->fDouble = std::numeric_limits<double>::infinity();
         } else {
             nonConstThis->fDouble = std::numeric_limits<double>::max();
         }
+#else
+        nonConstThis->fDouble = DBL_MAX;
+#endif
         if (!isPositive()) {
             nonConstThis->fDouble = -fDouble;
         } 
diff --git a/source/i18n/reldtfmt.h b/source/i18n/reldtfmt.h
index d7eed6e..021cf96 100644
--- a/source/i18n/reldtfmt.h
+++ b/source/i18n/reldtfmt.h
@@ -79,7 +79,9 @@ public:
     virtual UBool operator==(const Format& other) const;
 
 
+#if (__GNUC__ > 2)
     using DateFormat::format;
+#endif
 
     /**
      * Format a date or time, which is the standard millis since 24:00 GMT, Jan
diff --git a/source/i18n/unicode/alphaindex.h b/source/i18n/unicode/alphaindex.h
index ad2dd30..d57ef61 100644
--- a/source/i18n/unicode/alphaindex.h
+++ b/source/i18n/unicode/alphaindex.h
@@ -588,6 +588,9 @@ private:
          Record(AlphabeticIndex *alphaIndex, const UnicodeString &name, const void *data);
          ~Record();
      };
+#if (__GNUC__ == 2)
+     friend struct Record;
+#endif
 
      /**
        * Holds all user records before they are distributed into buckets.
diff --git a/source/i18n/unicode/choicfmt.h b/source/i18n/unicode/choicfmt.h
index 663d45a..479e818 100644
--- a/source/i18n/unicode/choicfmt.h
+++ b/source/i18n/unicode/choicfmt.h
@@ -352,7 +352,9 @@ public:
     virtual const UnicodeString* getFormats(int32_t& count) const;
 
 
+#if (__GNUC__ > 2)
     using NumberFormat::format;
+#endif
 
     /**
      * Formats a double number using this object's choices.
diff --git a/source/i18n/unicode/datefmt.h b/source/i18n/unicode/datefmt.h
index c79dec8..4ebfdd1 100644
--- a/source/i18n/unicode/datefmt.h
+++ b/source/i18n/unicode/datefmt.h
@@ -212,7 +212,9 @@ public:
     virtual UBool operator==(const Format&) const;
 
 
+#if (__GNUC__ > 2)
     using Format::format;
+#endif
 
     /**
      * Format an object to produce a string. This method handles Formattable
diff --git a/source/i18n/unicode/decimfmt.h b/source/i18n/unicode/decimfmt.h
index 92d54fb..50c839e 100644
--- a/source/i18n/unicode/decimfmt.h
+++ b/source/i18n/unicode/decimfmt.h
@@ -834,7 +834,16 @@ public:
     virtual UBool operator==(const Format& other) const;
 
 
+#if (__GNUC__ > 2)
     using NumberFormat::format;
+#else
+    virtual UnicodeString& format(const Formattable& obj,
+                                  UnicodeString& appendTo,
+                                  FieldPositionIterator* posIter,
+                                  UErrorCode& status) const {
+        return NumberFormat::format(obj, appendTo, posIter, status);
+    }
+#endif
 
     /**
      * Format a double or long number using base-10 representation.
diff --git a/source/i18n/unicode/dtitvfmt.h b/source/i18n/unicode/dtitvfmt.h
index 009c3b0..85ddc7c 100644
--- a/source/i18n/unicode/dtitvfmt.h
+++ b/source/i18n/unicode/dtitvfmt.h
@@ -363,7 +363,9 @@ public:
     UBool operator!=(const Format& other) const;
 
 
+#if (__GNUC__ > 2)
     using Format::format;
+#endif
 
     /**
      * Format an object to produce a string. This method handles Formattable
diff --git a/source/i18n/unicode/msgfmt.h b/source/i18n/unicode/msgfmt.h
index b2fc2b2..96c0028 100644
--- a/source/i18n/unicode/msgfmt.h
+++ b/source/i18n/unicode/msgfmt.h
@@ -615,7 +615,9 @@ public:
     virtual const Format** getFormats(int32_t& count) const;
 
 
+#if (__GNUC__ > 2)
     using Format::format;
+#endif
 
     /**
      * Formats the given array of arguments into a user-readable string.
diff --git a/source/i18n/unicode/numfmt.h b/source/i18n/unicode/numfmt.h
index 4396495..834ddbf 100644
--- a/source/i18n/unicode/numfmt.h
+++ b/source/i18n/unicode/numfmt.h
@@ -212,8 +212,9 @@ public:
      */
     virtual UBool operator==(const Format& other) const;
 
-
+#if (__GNUC__ > 2)
     using Format::format;
+#endif
 
     /**
      * Format an object to produce a string.  This method handles
diff --git a/source/i18n/unicode/plurfmt.h b/source/i18n/unicode/plurfmt.h
index cc1a426..d77b943 100644
--- a/source/i18n/unicode/plurfmt.h
+++ b/source/i18n/unicode/plurfmt.h
@@ -281,7 +281,9 @@ public:
     void applyPattern(const UnicodeString& pattern, UErrorCode& status);
 
 
+#if (__GNUC__ > 2)
     using Format::format;
+#endif
 
     /**
      * Formats a plural message for a given number.
diff --git a/source/i18n/unicode/rbnf.h b/source/i18n/unicode/rbnf.h
index 59835d3..6d1fa9b 100644
--- a/source/i18n/unicode/rbnf.h
+++ b/source/i18n/unicode/rbnf.h
@@ -722,7 +722,9 @@ public:
                           const Locale& locale = Locale::getDefault());
 
 
+#if (__GNUC__ > 2)
   using NumberFormat::format;
+#endif
 
   /**
    * Formats the specified 32-bit number using the default ruleset.
diff --git a/source/i18n/unicode/selfmt.h b/source/i18n/unicode/selfmt.h
index 635144b..8cc85e0 100644
--- a/source/i18n/unicode/selfmt.h
+++ b/source/i18n/unicode/selfmt.h
@@ -219,7 +219,9 @@ public:
     void applyPattern(const UnicodeString& pattern, UErrorCode& status);
 
 
+#if (__GNUC__ > 2)
     using Format::format;
+#endif
 
     /**
      * Selects the phrase for  the given keyword
diff --git a/source/i18n/unicode/smpdtfmt.h b/source/i18n/unicode/smpdtfmt.h
index 927729b..dd7c7ef 100644
--- a/source/i18n/unicode/smpdtfmt.h
+++ b/source/i18n/unicode/smpdtfmt.h
@@ -369,7 +369,9 @@ public:
     virtual UBool operator==(const Format& other) const;
 
 
+#if (__GNUC__ > 2)
     using DateFormat::format;
+#endif
 
     /**
      * Format a date or time, which is the standard millis since 24:00 GMT, Jan
diff --git a/source/i18n/unicode/tmutfmt.h b/source/i18n/unicode/tmutfmt.h
index 8252cc2..c0d35a9 100644
--- a/source/i18n/unicode/tmutfmt.h
+++ b/source/i18n/unicode/tmutfmt.h
@@ -162,7 +162,16 @@ public:
     void setNumberFormat(const NumberFormat& format, UErrorCode& status);
 
 
+#if (__GNUC__ > 2)
     using MeasureFormat::format;
+#else
+    virtual UnicodeString& format(const Formattable& obj,
+                                  UnicodeString& appendTo,
+                                  FieldPositionIterator* posIter,
+                                  UErrorCode& status) const {
+        return MeasureFormat::format(obj, appendTo, posIter, status);
+    }
+#endif
 
     /**
      * Format a TimeUnitAmount.
-- 
1.8.1.4

