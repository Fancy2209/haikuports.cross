SUMMARY="International Components for Unicode (ICU)"
HOMEPAGE="http://www.icu-project.org"
LICENSE="ICU"
COPYRIGHT="1997-2014 IBM Corporation and others."
SOURCE_URI="http://download.icu-project.org/files/icu4c/$portVersion/icu4c-54_1-src.tgz"
CHECKSUM_SHA256="d42bc9a8ca6a91c55eb0925c279f49e5b508d51ef26ac9850d9be55de5bb8ab3"
REVISION="1"
ARCHITECTURES="x86_gcc2 x86 x86_64 ppc arm"
SECONDARY_ARCHITECTURES="x86_gcc2 x86"

PROVIDES="
	icu_bootstrap$secondaryArchSuffix = $portVersion compat >= 54
	icu$secondaryArchSuffix = $portVersion compat >= 54
	lib:libicudata$secondaryArchSuffix = 54.1 compat >= 54
	lib:libicui18n$secondaryArchSuffix = 54.1 compat >= 54
	lib:libicuio$secondaryArchSuffix = 54.1 compat >= 54
	lib:libicule$secondaryArchSuffix = 54.1 compat >= 54
	lib:libiculx$secondaryArchSuffix = 54.1 compat >= 54
	lib:libicutest$secondaryArchSuffix = 54.1 compat >= 54
	lib:libicutu$secondaryArchSuffix = 54.1 compat >= 54
	lib:libicuuc$secondaryArchSuffix = 54.1 compat >= 54
	"
REQUIRES="
	haiku$secondaryArchSuffix
	"

BUILD_REQUIRES="
	"
BUILD_PREREQUIRES="
	haiku${secondaryArchSuffix}_devel
	cmd:autoconf
	cmd:awk
	binutils_cross_$effectiveTargetArchitecture
	gcc_cross_$effectiveTargetArchitecture
	cmd:gcc$secondaryArchSuffix
	cmd:ld$secondaryArchSuffix
	cmd:make
	cmd:sed
	"

SOURCE_DIR="icu"
PATCHES="icu-54.1.patchset"

sourceDir=$(pwd)
buildOutputDir=$sourceDir/../icu-build
targetOutputDir=$sourceDir/../icu-target

BUILD()
{
	cd source
	autoconf
	cd ..

	# make build-architecture-specific output directory and build ICU for the
	# current architecture
	mkdir -p $buildOutputDir
	cd $buildOutputDir
	runConfigure ../icu/source/configure \
		--disable-renaming --disable-samples --disable-extras
	make $jobArgs

	# now make target-architecture-specific output directory and build ICU for
	# the target architecture, pointing at the directory containing the version
	# that's just been built for the build architecture
	mkdir -p $targetOutputDir
	cd $targetOutputDir
	runConfigure ../icu/source/configure \
		--host=$effectiveTargetMachineTriple \
		--with-cross-build=$buildOutputDir \
		--disable-renaming --disable-samples --disable-extras
	make $jobArgs
}

INSTALL()
{
	cd $targetOutputDir
	make DESTDIR=$installDestDir install

	prepareInstalledDevelLibs \
		libicudata \
		libicui18n \
		libicuio \
		libicule \
		libiculx \
		libicutu \
		libicuuc
	fixPkgconfig

	# devel package
	packageEntries devel \
		$installDestDir$developDir \
		$installDestDir$dataDir \
		$installDestDir$libDir/icu \
		$installDestDir$binDir/icu-config

	# main package cleanup
	rm -r $installDestDir$binDir
}

TEST()
{
	cd source
	make check
}

DESCRIPTION="
ICU is a mature, widely used set of C/C++ and Java libraries providing Unicode \
and Globalization support for software applications. ICU is widely portable \
and gives applications the same results on all platforms and between C/C++ and \
Java software.
ICU is released under a nonrestrictive open source license that is suitable \
for use with both commercial software and with other open source or free \
software.
Here are a few highlights of the services provided by ICU:
* Code Page Conversion: Convert text data to or from Unicode and nearly any \
other character set or encoding. ICU's conversion tables are based on charset \
data collected by IBM over the course of many decades, and is the most \
complete available anywhere.
* Collation: Compare strings according to the conventions and standards of a \
particular language, region or country. ICU's collation is based on the \
Unicode Collation Algorithm plus locale-specific comparison rules from the \
Common Locale Data Repository, a comprehensive source for this type of data.
* Formatting: Format numbers, dates, times and currency amounts according the \
conventions of a chosen locale. This includes translating month and day names \
into the selected language, choosing appropriate abbreviations, ordering \
fields correctly, etc. This data also comes from the Common Locale Data \
Repository.
* Time Calculations: Multiple types of calendars are provided beyond the \
traditional Gregorian calendar. A thorough set of timezone calculation APIs \
are provided.
* Unicode Support: ICU closely tracks the Unicode standard, providing easy \
access to all of the many Unicode character properties, Unicode Normalization, \
Case Folding and other fundamental operations as specified by the Unicode \
Standard.
* Regular Expression: ICU's regular expressions fully support Unicode while \
providing very competitive performance.
* Bidi: support for handling text containing a mixture of left to right \
(English) and right to left (Arabic or Hebrew) data.
* Text Boundaries: Locate the positions of words, sentences, paragraphs within \
a range of text, or identify locations that would be suitable for line \
wrapping when displaying the text.
"

# ----- devel package -------------------------------------------------------

SUMMARY_devel="The ICU development files"
PROVIDES_devel="
	icu_bootstrap${secondaryArchSuffix}_devel = $portVersion
	icu${secondaryArchSuffix}_devel = $portVersion
	cmd:icu_config${secondaryArchSuffix} = $portVersion compat >= 54
	devel:libicudata${secondaryArchSuffix} = 54.1 compat >= 54
	devel:libicui18n${secondaryArchSuffix} = 54.1 compat >= 54
	devel:libicuio${secondaryArchSuffix} = 54.1 compat >= 54
	devel:libicule${secondaryArchSuffix} = 54.1 compat >= 54
	devel:libiculx${secondaryArchSuffix} = 54.1 compat >= 54
	devel:libicutest${secondaryArchSuffix} = 54.1 compat >= 54
	devel:libicutu${secondaryArchSuffix} = 54.1 compat >= 54
	devel:libicuuc${secondaryArchSuffix} = 54.1 compat >= 54
	"
REQUIRES_devel="
	icu_bootstrap${secondaryArchSuffix} == $portVersion base
	"
