SUMMARY="C/C++ cross-compiler for target ${effectiveTargetMachineTriple}"
DESCRIPTION="Standard compiler for x86 platform."
HOMEPAGE="http://gcc.gnu.org"
LICENSE="
	GNU GPL v2
	GNU LGPL v2
	"
COPYRIGHT="1988-2013 Free Software Foundation, Inc."
srcGitRev="c20a732df8f8b6d0f32c872817f3a0498a5c4761"
SRC_URI="https://github.com/haiku/buildtools/archive/$srcGitRev.tar.gz"
REVISION="1"

CHECKSUM_SIZE="155931258"
CHECKSUM_MD5="799058d91d7e8772dc78c64d4f6722f3"
CHECKSUM_RMD160="b81cf4d5a551408587d0e9209f399226c2661ccf"
CHECKSUM_SHA512="3b8b41c08c4c06137835fc88ff996597d75e4ace7e24f5310d0daaf0ccb73c92a69c11f15801bf561c310a44f0721930ba3b598c37a7f4fa2c411931a8fb8205"

ARCHITECTURES="x86 x86_64 ppc arm"
if [ $effectiveTargetArchitecture != x86_gcc2 ]; then
	# x86_gcc2 is fine as primary target architecture as long as we're building
	# for a different secondary architecture.
	ARCHITECTURES="$ARCHITECTURES x86_gcc2"
fi
SECONDARY_ARCHITECTURES="x86"

PROVIDES="
	gcc_bootstrap$secondaryArchSuffix = $portVersion compat >= 4
	gcc$secondaryArchSuffix = $portVersion compat >= 4
	cmd:c++$secondaryArchSuffix = $portVersion compat >= 4
	cmd:cc$secondaryArchSuffix = $portVersion compat >= 4
	cmd:cpp$secondaryArchSuffix = $portVersion compat >= 4
	cmd:g++$secondaryArchSuffix = $portVersion compat >= 4
	cmd:gcc$secondaryArchSuffix = $portVersion compat >= 4
	cmd:gcc_4.7.3$secondaryArchSuffix = $portVersion compat >= 4
	cmd:gcov$secondaryArchSuffix = $portVersion compat >= 4
	lib:libstdc++ = $portVersion compat >= 4
	"

REQUIRES="
	haiku$secondaryArchSuffix >= $haikuVersion
	"
BUILD_REQUIRES="
	"
BUILD_PREREQUIRES="
	haiku${secondaryArchSuffix}_devel >= $haikuVersion
	binutils_cross_${effectiveTargetArchitecture}
	gcc_cross_${effectiveTargetArchitecture}
	cmd:autoconf
	cmd:flex
	cmd:gcc
	cmd:make
	cmd:makeinfo
	cmd:sed
	cmd:tar
	"

SOURCE_DIR="buildtools-$srcGitRev/gcc"

sourceDir=$(pwd)
relativeInstallDir="develop/tools$secondaryArchSubDir"
installDir="$prefix/$relativeInstallDir"
objectsDir=$(pwd)/../${portVersionedName}-obj

BUILD()
{
	crossGccVersion=$($effectiveTargetMachineTriple-gcc -dumpversion)
	bootstrapGccVersion=$(echo "$portVersion" | cut -d_ -f1)
	if [[ $crossGccVersion != $bootstrapGccVersion ]]; then
		cat <<- EOF
			*** Version mismatch detected between cross-compiler and the
			*** gcc_bootstrap port:
			***     cross-compiler version is "$crossGccVersion"
			***     gcc_bootstrap version is "$bootstrapGccVersion"
			*** Using different compiler versions is likely to cause problems
			*** when running the Haiku bootstrap image, especially with respect
			*** to incompatibilities between different versions of libstdc++.
			*** Please update the gcc_bootstrap recipe version to match the 
			*** cross-compiler!
			EOF
		exit 1
	fi

	rm -rf $objectsDir

	# Touch some files generated by bison, so that bison won't run to update
	# them. Fixes issues with newer bison versions.
	# And while at it, touch gperf target, too (as gperf may not be installed).
	(cd $sourceDir/gcc; touch c-parse.c c-parse.h cexp.c cp/parse.c \
		cp/parse.h c-gperf.h)

	mkdir -p $objectsDir
	cd $objectsDir

	local additionalConfigureFlags
	if [ -n "$secondaryArchSuffix" ]; then
		additionalConfigureFlags="\
			--with-hybrid-secondary=${effectiveTargetArchitecture}"
	fi
	if [ $effectiveTargetArchitecture == x86_64 ]; then
		# disable multilib support, as x86_64 by default tries to build the
		# 32-bit libraries, too, which fails as no 32-bit libroot is available
		additionalConfigureFlags+=" --disable-multilib"
	fi
	if [ $effectiveTargetArchitecture == arm ]; then
		# disable multilib support, as x86_64 by default tries to build the
		# soft-float libraries, too, which fails as no soft float libroot is
		# available
		additionalConfigureFlags+=" --disable-multilib --with-float=hard"
	fi

	CFLAGS="-O2 -U_FORTIFY_SOURCE" CXXFLAGS="-O2" "$sourceDir/configure" \
		--build=$buildMachineTriple --host=$effectiveTargetMachineTriple \
		--target=$effectiveTargetMachineTriple --prefix=$installDir \
		--libexecdir=$installDir/lib --mandir=$manDir --docdir=$docDir \
		--disable-nls --enable-shared --disable-plugin \
		--enable-languages=c,c++ --enable-lto --enable-frame-pointer \
		--with-pkgversion=$(echo $portVersion | cut -c 7-) \
		--with-sysroot=/ \
		--with-build-sysroot=$installDestDir/ \
		--with-threads=posix \
		$additionalConfigureFlags
		# Note: The --with-sysroot=/ is rather silly, but --with-build-sysroot
		# only works when --with-sysroot has been given as well.
		# Note: '--disable-plugin' circumvents what seems to be a gcc bug: 
		# when building with plugin support, the build fails for gengtype.c,
		# where build machine configuration (bconfig.h) and Haiku headers 
		# (stdio.h) are getting mixed up.

	make $jobArgs
}

INSTALL()
{
	cd $objectsDir

	make DESTDIR=$installDestDir install

	### Strip #################################################

	echo "Strip debug info"

	cd $installDestDir$installDir
	$effectiveTargetMachineTriple-strip --strip-debug bin/*
	for f in cc1 cc1plus collect2 lto1; do
		$effectiveTargetMachineTriple-strip --strip-debug \
			lib/gcc/$effectiveTargetMachineTriple/*/$f
	done
	$effectiveTargetMachineTriple-strip --strip-debug lib/*.a

	### Symlinks ##############################################

	echo "Creating required symlinks"

	# create missing cc symlink
	ln -sf gcc $installDestDir$installDir/bin/cc

	# make all tools available via default paths
	mkdir -p $installDestDir$binDir
	for f in c++ cc cpp g++ gcc gcov; do
		symlinkRelative -sfn $installDestDir$installDir/bin/$f \
			$installDestDir$binDir
	done

	# replace a few copies with symlinks
	for f in gcc-ar gcc-ranlib gcc gcc-nm g++ c++; do
		ln -sf $f \
			$installDestDir$installDir/bin/${effectiveTargetMachineTriple}-$f
	done

	local mainVersion=$(echo $portVersion | sed 's,_.*,,')
	ln -sfn gcc \
		$installDestDir$installDir/bin/${effectiveTargetMachineTriple}-gcc-$mainVersion
	ln -sfn g++ $installDestDir$installDir/bin/c++

	### Cleanup ###############################################

	echo "Cleanup"
	rm -rf $installDestDir$installDir/info
	rm -rf $installDestDir$installDir/share
}
