From 21ae3372d49fa584a0d59806dae784d8161bc5de Mon Sep 17 00:00:00 2001
From: Oliver Tappe <zooey@hirschkaefer.de>
Date: Fri, 24 May 2013 20:27:26 +0200
Subject: applying patch grep-2.14-x86_gcc2.patch


diff --git a/lib/fts.c b/lib/fts.c
index 42c8067..cbb84e3 100644
--- a/lib/fts.c
+++ b/lib/fts.c
@@ -1278,6 +1278,7 @@ fts_build (register FTS *sp, int type)
         nlink_t nlinks;
         bool nostat;
         size_t len, maxlen, new_len;
+	size_t max_entries;
         char *cp;
         int dir_fd;
         FTSENT *cur = sp->fts_cur;
@@ -1343,8 +1344,8 @@ fts_build (register FTS *sp, int type)
            function.  But when no such function is specified, we can read
            entries in batches that are large enough to help us with inode-
            sorting, yet not so large that we risk exhausting memory.  */
-        size_t max_entries = (sp->fts_compar == NULL
-                              ? FTS_MAX_READDIR_ENTRIES : SIZE_MAX);
+        max_entries = (sp->fts_compar == NULL
+                       ? FTS_MAX_READDIR_ENTRIES : SIZE_MAX);
 
         /*
          * Nlinks is the number of possible entries of type directory in the
diff --git a/lib/regcomp.c b/lib/regcomp.c
index 81277dc..2f9587e 100644
--- a/lib/regcomp.c
+++ b/lib/regcomp.c
@@ -952,10 +952,10 @@ static void
 internal_function
 init_word_char (re_dfa_t *dfa)
 {
-  dfa->word_ops_used = 1;
   int i = 0;
   int j;
   int ch = 0;
+  dfa->word_ops_used = 1;
   if (BE (dfa->map_notascii == 0, 1))
     {
       bitset_word_t bits0 = 0x00000000;
diff --git a/src/dfasearch.c b/src/dfasearch.c
index eaf783e..af91cce 100644
--- a/src/dfasearch.c
+++ b/src/dfasearch.c
@@ -216,6 +216,7 @@ EGexecute (char const *buf, size_t size, size_t *match_size,
   int backref;
   regoff_t start;
   size_t len, best_len;
+  size_t off;
   struct kwsmatch kwsm;
   size_t i, ret_val;
   mb_len_map_t *map = NULL;
@@ -418,7 +419,7 @@ EGexecute (char const *buf, size_t size, size_t *match_size,
  success:
   len = end - beg;
  success_in_len:;
-  size_t off = beg - buf;
+  off = beg - buf;
   mb_case_map_apply (map, &off, &len);
   *match_size = len;
   ret_val = off;
diff --git a/src/kwsearch.c b/src/kwsearch.c
index b56b465..855b04d 100644
--- a/src/kwsearch.c
+++ b/src/kwsearch.c
@@ -39,9 +39,9 @@ Fcompile (char const *pattern, size_t size)
                      ? mbtolower (pattern, &psize, &map)
                      : pattern);
 
-  kwsinit (&kwset);
-
   char const *beg = pat;
+
+  kwsinit (&kwset);
   do
     {
       char const *lim;
@@ -81,6 +81,7 @@ Fexecute (char const *buf, size_t size, size_t *match_size,
 {
   char const *beg, *try, *end, *mb_start;
   size_t len;
+  size_t off;
   char eol = eolbyte;
   struct kwsmatch kwsmatch;
   size_t ret_val;
@@ -100,6 +101,7 @@ Fexecute (char const *buf, size_t size, size_t *match_size,
   for (mb_start = beg = start_ptr ? start_ptr : buf; beg <= buf + size; beg++)
     {
       size_t offset = kwsexec (kwset, beg, buf + size - beg, &kwsmatch);
+      size_t mb_len;
       if (offset == (size_t) -1)
         goto failure;
       len = kwsmatch.size[0];
@@ -110,7 +112,7 @@ Fexecute (char const *buf, size_t size, size_t *match_size,
              one byte to ensure no infinite loop happens.  */
           mbstate_t s;
           memset (&s, 0, sizeof s);
-          size_t mb_len = mbrlen (mb_start, (buf + size) - (beg + offset), &s);
+          mb_len = mbrlen (mb_start, (buf + size) - (beg + offset), &s);
           if (mb_len == (size_t) -2)
             goto failure;
           beg = mb_start;
@@ -166,7 +168,7 @@ Fexecute (char const *buf, size_t size, size_t *match_size,
     --beg;
   len = end - beg;
  success_in_beg_and_len:;
-  size_t off = beg - buf;
+  off = beg - buf;
   mb_case_map_apply (map, &off, &len);
 
   *match_size = len;
diff --git a/src/main.c b/src/main.c
index e3b5186..08d7dc8 100644
--- a/src/main.c
+++ b/src/main.c
@@ -460,6 +460,7 @@ file_is_binary (char const *buf, size_t bufsize, int fd, struct stat const *st)
   if (SEEK_HOLE != SEEK_END && usable_st_size (st))
     {
       off_t cur = bufsize;
+      off_t hole_start;
       if (O_BINARY || fd == STDIN_FILENO)
         {
           cur = lseek (fd, 0, SEEK_CUR);
@@ -468,7 +469,7 @@ file_is_binary (char const *buf, size_t bufsize, int fd, struct stat const *st)
         }
 
       /* Look for a hole after the current location.  */
-      off_t hole_start = lseek (fd, cur, SEEK_HOLE);
+      hole_start = lseek (fd, cur, SEEK_HOLE);
       if (0 <= hole_start)
         {
           if (lseek (fd, cur, SEEK_SET) < 0)
@@ -1860,6 +1861,7 @@ main (int argc, char **argv)
   size_t keycc, oldcc, keyalloc;
   int with_filenames;
   size_t cc;
+  struct stat tmp_stat;
   int opt, status, prepended;
   int prev_optind, last_recursive;
   intmax_t default_context;
@@ -2223,7 +2225,6 @@ main (int argc, char **argv)
   if (show_help)
     usage (EXIT_SUCCESS);
 
-  struct stat tmp_stat;
   if (fstat (STDOUT_FILENO, &tmp_stat) == 0 && S_ISREG (tmp_stat.st_mode))
     out_stat = tmp_stat;
 
diff --git a/src/searchutils.c b/src/searchutils.c
index ca30134..1e7eee1 100644
--- a/src/searchutils.c
+++ b/src/searchutils.c
@@ -80,6 +80,7 @@ mbtolower (const char *beg, size_t *n, mb_len_map_t **len_map_p)
   static mb_len_map_t *len_map;
   static size_t outalloc;
   size_t outlen, mb_cur_max;
+  size_t ombclen;
   mbstate_t is, os;
   const char *end;
   char *p;
@@ -133,7 +134,7 @@ mbtolower (const char *beg, size_t *n, mb_len_map_t **len_map_p)
       else
         {
           beg += mbclen;
-          size_t ombclen = wcrtomb (p, towlower ((wint_t) wc), &os);
+          ombclen = wcrtomb (p, towlower ((wint_t) wc), &os);
           *m = mbclen - ombclen;
           memset (m + 1, 0, ombclen - 1);
           m += ombclen;
-- 
1.7.5

